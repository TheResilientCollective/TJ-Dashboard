// --- i18next Initialization ---
async function initializeI18next() {
    await i18next
        .use(i18nextHttpBackend)
        .use(i18nextBrowserLanguageDetector) // Optional: Detect browser language
        .init({
            debug: true, // Set to false for production
            fallbackLng: "en", // Language to use if detection fails or translation is missing
            detection: {
                // Order and methods for detecting language
                order: [
                    "querystring",
                    "cookie",
                    "localStorage",
                    "sessionStorage",
                    "navigator",
                    "htmlTag"
                ],
                lookupQuerystring: "lang", // Detect language from ?lang=es
                lookupCookie: "i18next",
                lookupLocalStorage: "i18nextLng",
                caches: ["localStorage", "cookie"] // Where to cache detected language
            },
            backend: {
                loadPath: "locales/{{lng}}.json" // Path to translation files
            },
            interpolation: {
                escapeValue: false // React already safes from xss, not needed for basic HTML
            }
        });

    // --- Apply translations after init ---
    updateContent();

    // --- Optional: Language Switcher ---
    // Example: Assuming you have buttons with data-lang attribute
    document.querySelectorAll("[data-lang]").forEach((button) => {
        button.addEventListener("click", (e) => {
            const lang = e.target.getAttribute("data-lang");
            i18next.changeLanguage(lang).then(updateContent);
        });
    });
}

function updateContent() {
    // Translate all elements with data-i18n attribute
    document.querySelectorAll("[data-i18n]").forEach((element) => {
        const key = element.getAttribute("data-i18n");
        const options = JSON.parse(
            element.getAttribute("data-i18n-options") || "{}"
        );
        // Use innerHTML for keys that contain HTML tags like links (...)
        if (element.dataset.i18nHtml) {
            element.innerHTML = i18next.t(key, options);
        } else {
            element.textContent = i18next.t(key, options);
        }
    });

    // Update elements generated by JavaScript (call relevant functions again)
    // You might need to refactor your data fetching/display functions
    // to be callable here or to use i18next directly.
    // fetchH2SData(); // Example re-fetch/re-render
    // fetchOdorData(); // Example re-fetch/re-render
    // fetchBeachData(); // Example re-fetch/re-render
    // updateMapElements(); // Function to update map text
}

/**
 * Sets the language in response to user action.
 * @param {string} lang - The language code (e.g., 'en', 'es')
 */
function setLanguage(lang) {
    console.log("[language.js] Setting language to:", lang);
    i18next.changeLanguage(lang).then(() => {
        console.log("[language.js] Language changed to:", lang);
        updateContent();
    });
}

initializeI18next();
